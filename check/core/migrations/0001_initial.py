# -*- coding: utf-8 -*-
# Generated by Django 1.11.7 on 2017-11-25 14:46
from __future__ import unicode_literals

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Banco',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telefone', models.CharField(max_length=50)),
                ('fax', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254)),
                ('logradouro', models.CharField(max_length=50)),
                ('numero', models.IntegerField()),
                ('bairro', models.CharField(max_length=50)),
                ('cidade', models.CharField(max_length=50)),
                ('uf', models.CharField(max_length=2, verbose_name='UF')),
                ('cep', models.CharField(max_length=50, verbose_name='CEP')),
                ('nome', models.CharField(max_length=50)),
                ('agencia', models.IntegerField(verbose_name='agência')),
                ('contato', models.CharField(max_length=50, verbose_name='pessoa de contato')),
                ('data_cadastro', models.DateField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Cliente',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telefone', models.CharField(max_length=50)),
                ('fax', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254)),
                ('logradouro', models.CharField(max_length=50)),
                ('numero', models.IntegerField()),
                ('bairro', models.CharField(max_length=50)),
                ('cidade', models.CharField(max_length=50)),
                ('uf', models.CharField(max_length=2, verbose_name='UF')),
                ('cep', models.CharField(max_length=50, verbose_name='CEP')),
                ('nome', models.CharField(max_length=50)),
                ('cpf', models.CharField(max_length=50, verbose_name='CPF')),
                ('rg', models.CharField(max_length=50, verbose_name='RG')),
                ('data_cadastro', models.DateField()),
                ('negativado', models.BooleanField()),
                ('limite_compra', models.FloatField(verbose_name='limite de compra')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Emitido',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_cheque', models.IntegerField()),
                ('tipo', models.IntegerField(choices=[(1, 'Cheque Pré')])),
                ('data_entrada', models.DateField()),
                ('data_desconto', models.DateField()),
                ('valor', models.FloatField()),
                ('data_cadastro', models.DateField()),
                ('numero_nota', models.IntegerField()),
                ('observacao', models.TextField()),
                ('banco', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Banco')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Empresa',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logradouro', models.CharField(max_length=50)),
                ('numero', models.IntegerField()),
                ('bairro', models.CharField(max_length=50)),
                ('cidade', models.CharField(max_length=50)),
                ('uf', models.CharField(max_length=2, verbose_name='UF')),
                ('cep', models.CharField(max_length=50, verbose_name='CEP')),
                ('nome', models.CharField(max_length=50)),
                ('cnpj', models.CharField(max_length=50, verbose_name='CPF/CNPJ')),
                ('ie', models.CharField(blank=True, max_length=50, null=True, verbose_name='inscrição estadual')),
                ('telefone', models.CharField(max_length=50)),
                ('fax', models.CharField(max_length=50)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Fornecedor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telefone', models.CharField(max_length=50)),
                ('fax', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254)),
                ('logradouro', models.CharField(max_length=50)),
                ('numero', models.IntegerField()),
                ('bairro', models.CharField(max_length=50)),
                ('cidade', models.CharField(max_length=50)),
                ('uf', models.CharField(max_length=2, verbose_name='UF')),
                ('cep', models.CharField(max_length=50, verbose_name='CEP')),
                ('nome', models.CharField(max_length=50)),
                ('tipo', models.IntegerField(choices=[(1, 'Física'), (2, 'Jurídica')], verbose_name='Tipo de pessoa')),
                ('cpf_cnpj', models.CharField(max_length=50, verbose_name='CPF/CNPJ')),
                ('ie', models.CharField(blank=True, max_length=50, null=True, verbose_name='inscrição estadual')),
                ('rg', models.CharField(blank=True, max_length=50, null=True, verbose_name='RG')),
                ('responsavel', models.CharField(max_length=50, verbose_name='responsável')),
                ('data_cadastro', models.DateField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Recebido',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_cheque', models.IntegerField()),
                ('tipo', models.IntegerField(choices=[(1, 'Cheque Pré')])),
                ('data_entrada', models.DateField()),
                ('data_desconto', models.DateField()),
                ('valor', models.FloatField()),
                ('data_cadastro', models.DateField()),
                ('data_lancamento', models.DateField()),
                ('banco', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Banco')),
                ('emitente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Cliente')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='emitido',
            name='fornecedor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Fornecedor'),
        ),
        migrations.AddField(
            model_name='user',
            name='empresa',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Empresa'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
